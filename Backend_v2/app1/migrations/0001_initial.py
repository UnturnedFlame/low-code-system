# Generated by Django 5.0.7 on 2024-07-24 02:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CaptchaModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, unique=True, verbose_name="邮箱地址"),
                ),
                ("captcha", models.CharField(max_length=4, verbose_name="验证码")),
                (
                    "create_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="发送时间"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IntermediateResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "inference",
                    models.CharField(default="NA", max_length=6, verbose_name="预测结果"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PreprocessedData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("T_max", models.FloatField(default=0, verbose_name="时域最大值")),
                ("T_min", models.FloatField(default=0, verbose_name="时域最小值")),
                ("T_mean", models.FloatField(default=0, verbose_name="时域平均值")),
                ("T_std", models.FloatField(default=0, verbose_name="时域标准差")),
                ("T_median", models.FloatField(default=0, verbose_name="时域中位数")),
                ("T_peak_peak", models.FloatField(default=0, verbose_name="时域峰峰值")),
                ("T_variance", models.FloatField(default=0, verbose_name="时域方差")),
                ("T_kurtosis", models.FloatField(default=0, verbose_name="时域峰度")),
                ("T_skewness", models.FloatField(default=0, verbose_name="时域偏度")),
                (
                    "T_root_mean_squared",
                    models.FloatField(default=0, verbose_name="时域均方根值"),
                ),
                (
                    "T_waveform_factor",
                    models.FloatField(default=0, verbose_name="波形因子"),
                ),
                ("T_peak_factor", models.FloatField(default=0, verbose_name="峰值因子")),
                ("T_pulse_factor", models.FloatField(default=0, verbose_name="脉冲因子")),
                ("T_margin_factor", models.FloatField(default=0, verbose_name="裕度因子")),
                ("T_root_amplitude", models.FloatField(default=0, verbose_name="方根幅值")),
                (
                    "T_commutation_mean",
                    models.FloatField(default=0, verbose_name="整流平均值"),
                ),
                (
                    "T_fourth_order_accumulation",
                    models.FloatField(default=0, verbose_name="四阶累积量"),
                ),
                (
                    "T_sixth_order_accumulation",
                    models.FloatField(default=0, verbose_name="六阶累积量"),
                ),
                (
                    "F_centroid_frequency",
                    models.FloatField(default=0, verbose_name="重心频率"),
                ),
                (
                    "F_mean_squared_frequency",
                    models.FloatField(default=0, verbose_name="均方频率"),
                ),
                ("F_rmsf", models.FloatField(default=0, verbose_name="均方根频率")),
                ("F_vf", models.FloatField(default=0, verbose_name="频率方差")),
                ("F_rvf", models.FloatField(default=0, verbose_name="频率标准差")),
                ("F_sk_mean", models.FloatField(default=0, verbose_name="谱峭度均值")),
                ("F_sk_std", models.FloatField(default=0, verbose_name="谱峭度标准差")),
                ("F_sk_skewness", models.FloatField(default=0, verbose_name="谱峭度偏度")),
                ("F_sk_kurtosis", models.FloatField(default=0, verbose_name="谱峭度峰度")),
            ],
        ),
        migrations.CreateModel(
            name="RegisteredSpeakers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(default="NA", max_length=32, verbose_name="说话人姓名"),
                ),
                ("feature_vector", models.BinaryField(verbose_name="说话人音频")),
            ],
        ),
        migrations.CreateModel(
            name="SavedModels",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="unknown", max_length=32, verbose_name="模型名称"
                    ),
                ),
                ("model_info", models.JSONField(verbose_name="模型信息")),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "jobName",
                    models.CharField(
                        default="unknown", max_length=32, unique=True, verbose_name="工号"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="SavedDatasetsFromUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dataset_name",
                    models.CharField(default="", max_length=32, verbose_name="数据文件名"),
                ),
                (
                    "file_path",
                    models.FileField(
                        default="", max_length=255, upload_to="", verbose_name="文件存放路径"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="数据所有者",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SavedModelFromUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "model_name",
                    models.CharField(
                        default="unknown", max_length=32, verbose_name="模型名称"
                    ),
                ),
                ("model_info", models.JSONField(verbose_name="模型信息")),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="模型建立者",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="saveddatasetsfromuser",
            constraint=models.UniqueConstraint(
                fields=("owner", "dataset_name"), name="unique_owner_dataset"
            ),
        ),
        migrations.AddConstraint(
            model_name="savedmodelfromuser",
            constraint=models.UniqueConstraint(
                fields=("author", "model_name"), name="unique_author_modelName"
            ),
        ),
    ]
